// Code generated by MockGen. DO NOT EDIT.
// Source: builder.go

// Package dinghyfile is a generated GoMock package.
package dinghyfile

import (
	bytes "bytes"
	plank "github.com/armory/plank"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRenderer is a mock of Renderer interface
type MockRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockRendererMockRecorder
}

// MockRendererMockRecorder is the mock recorder for MockRenderer
type MockRendererMockRecorder struct {
	mock *MockRenderer
}

// NewMockRenderer creates a new mock instance
func NewMockRenderer(ctrl *gomock.Controller) *MockRenderer {
	mock := &MockRenderer{ctrl: ctrl}
	mock.recorder = &MockRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRenderer) EXPECT() *MockRendererMockRecorder {
	return m.recorder
}

// Render mocks base method
func (m *MockRenderer) Render(org, repo, path string, vars []varMap) (*bytes.Buffer, error) {
	ret := m.ctrl.Call(m, "Render", org, repo, path, vars)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Render indicates an expected call of Render
func (mr *MockRendererMockRecorder) Render(org, repo, path, vars interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockRenderer)(nil).Render), org, repo, path, vars)
}

// MockPlankClient is a mock of PlankClient interface
type MockPlankClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlankClientMockRecorder
}

// MockPlankClientMockRecorder is the mock recorder for MockPlankClient
type MockPlankClientMockRecorder struct {
	mock *MockPlankClient
}

// NewMockPlankClient creates a new mock instance
func NewMockPlankClient(ctrl *gomock.Controller) *MockPlankClient {
	mock := &MockPlankClient{ctrl: ctrl}
	mock.recorder = &MockPlankClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlankClient) EXPECT() *MockPlankClientMockRecorder {
	return m.recorder
}

// GetApplication mocks base method
func (m *MockPlankClient) GetApplication(arg0 string) (*plank.Application, error) {
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*plank.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockPlankClientMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockPlankClient)(nil).GetApplication), arg0)
}

// CreateApplication mocks base method
func (m *MockPlankClient) CreateApplication(arg0 *plank.Application) error {
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockPlankClientMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockPlankClient)(nil).CreateApplication), arg0)
}

// GetPipeline mocks base method
func (m *MockPlankClient) GetPipeline(arg0, arg1 string) (*plank.Pipeline, error) {
	ret := m.ctrl.Call(m, "GetPipeline", arg0, arg1)
	ret0, _ := ret[0].(*plank.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline
func (mr *MockPlankClientMockRecorder) GetPipeline(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPlankClient)(nil).GetPipeline), arg0, arg1)
}

// GetPipelines mocks base method
func (m *MockPlankClient) GetPipelines(arg0 string) ([]plank.Pipeline, error) {
	ret := m.ctrl.Call(m, "GetPipelines", arg0)
	ret0, _ := ret[0].([]plank.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelines indicates an expected call of GetPipelines
func (mr *MockPlankClientMockRecorder) GetPipelines(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelines", reflect.TypeOf((*MockPlankClient)(nil).GetPipelines), arg0)
}

// DeletePipeline mocks base method
func (m *MockPlankClient) DeletePipeline(arg0 plank.Pipeline) error {
	ret := m.ctrl.Call(m, "DeletePipeline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline
func (mr *MockPlankClientMockRecorder) DeletePipeline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockPlankClient)(nil).DeletePipeline), arg0)
}

// UpsertPipeline mocks base method
func (m *MockPlankClient) UpsertPipeline(arg0 plank.Pipeline) error {
	ret := m.ctrl.Call(m, "UpsertPipeline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPipeline indicates an expected call of UpsertPipeline
func (mr *MockPlankClientMockRecorder) UpsertPipeline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPipeline", reflect.TypeOf((*MockPlankClient)(nil).UpsertPipeline), arg0)
}

// MockDependencyManager is a mock of DependencyManager interface
type MockDependencyManager struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyManagerMockRecorder
}

// MockDependencyManagerMockRecorder is the mock recorder for MockDependencyManager
type MockDependencyManagerMockRecorder struct {
	mock *MockDependencyManager
}

// NewMockDependencyManager creates a new mock instance
func NewMockDependencyManager(ctrl *gomock.Controller) *MockDependencyManager {
	mock := &MockDependencyManager{ctrl: ctrl}
	mock.recorder = &MockDependencyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDependencyManager) EXPECT() *MockDependencyManagerMockRecorder {
	return m.recorder
}

// SetDeps mocks base method
func (m *MockDependencyManager) SetDeps(parent string, deps []string) {
	m.ctrl.Call(m, "SetDeps", parent, deps)
}

// SetDeps indicates an expected call of SetDeps
func (mr *MockDependencyManagerMockRecorder) SetDeps(parent, deps interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeps", reflect.TypeOf((*MockDependencyManager)(nil).SetDeps), parent, deps)
}

// GetRoots mocks base method
func (m *MockDependencyManager) GetRoots(child string) []string {
	ret := m.ctrl.Call(m, "GetRoots", child)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRoots indicates an expected call of GetRoots
func (mr *MockDependencyManagerMockRecorder) GetRoots(child interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoots", reflect.TypeOf((*MockDependencyManager)(nil).GetRoots), child)
}

// MockDownloader is a mock of Downloader interface
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// Download mocks base method
func (m *MockDownloader) Download(org, repo, file string) (string, error) {
	ret := m.ctrl.Call(m, "Download", org, repo, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (mr *MockDownloaderMockRecorder) Download(org, repo, file interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloader)(nil).Download), org, repo, file)
}

// EncodeURL mocks base method
func (m *MockDownloader) EncodeURL(org, repo, file string) string {
	ret := m.ctrl.Call(m, "EncodeURL", org, repo, file)
	ret0, _ := ret[0].(string)
	return ret0
}

// EncodeURL indicates an expected call of EncodeURL
func (mr *MockDownloaderMockRecorder) EncodeURL(org, repo, file interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeURL", reflect.TypeOf((*MockDownloader)(nil).EncodeURL), org, repo, file)
}

// DecodeURL mocks base method
func (m *MockDownloader) DecodeURL(url string) (string, string, string) {
	ret := m.ctrl.Call(m, "DecodeURL", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// DecodeURL indicates an expected call of DecodeURL
func (mr *MockDownloaderMockRecorder) DecodeURL(url interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeURL", reflect.TypeOf((*MockDownloader)(nil).DecodeURL), url)
}
