// Code generated by MockGen. DO NOT EDIT.
// Source: source.go

// Package source is a generated GoMock package.
package source

import (
	global "github.com/armory/dinghy/pkg/settings/global"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSource is a mock of Source interface
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockSource) Load() (*global.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*global.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockSourceMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSource)(nil).Load))
}

// GetConfigurationByKey mocks base method
func (m *MockSource) GetConfigurationByKey(arg0 SettingField) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationByKey", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetConfigurationByKey indicates an expected call of GetConfigurationByKey
func (mr *MockSourceMockRecorder) GetConfigurationByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationByKey", reflect.TypeOf((*MockSource)(nil).GetConfigurationByKey), arg0)
}

// GetStringArrayByKey mocks base method
func (m *MockSource) GetStringArrayByKey(arg0 SettingField) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringArrayByKey", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetStringArrayByKey indicates an expected call of GetStringArrayByKey
func (mr *MockSourceMockRecorder) GetStringArrayByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringArrayByKey", reflect.TypeOf((*MockSource)(nil).GetStringArrayByKey), arg0)
}

// GetStringByKey mocks base method
func (m *MockSource) GetStringByKey(arg0 SettingField) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringByKey", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStringByKey indicates an expected call of GetStringByKey
func (mr *MockSourceMockRecorder) GetStringByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringByKey", reflect.TypeOf((*MockSource)(nil).GetStringByKey), arg0)
}

// GetBoolByKey mocks base method
func (m *MockSource) GetBoolByKey(arg0 SettingField) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoolByKey", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBoolByKey indicates an expected call of GetBoolByKey
func (mr *MockSourceMockRecorder) GetBoolByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoolByKey", reflect.TypeOf((*MockSource)(nil).GetBoolByKey), arg0)
}

// GetSourceName mocks base method
func (m *MockSource) GetSourceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceName indicates an expected call of GetSourceName
func (mr *MockSourceMockRecorder) GetSourceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceName", reflect.TypeOf((*MockSource)(nil).GetSourceName))
}
